// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ImmutableVirtualizedList renders basic List 1`] = `
<RCTScrollView
  data={
    Immutable.List [
      "lists",
      "are",
      "great",
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        "lists"
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        "are"
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        "great"
      </Text>
    </View>
  </View>
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList renders basic Range 1`] = `
<RCTScrollView
  data={Immutable.Seq [â€¦]}
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        3
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        6
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        9
      </Text>
    </View>
  </View>
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList renders nested List 1`] = `
<RCTScrollView
  data={
    Immutable.List [
      Array [
        "so",
        "are",
      ],
      Array [
        "nested",
        "lists",
      ],
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        ["so","are"]
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        ["nested","lists"]
      </Text>
    </View>
  </View>
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList renders with empty data 1`] = `
<RCTScrollView
  data={
    Immutable.List [
      Immutable.List [
        undefined,
        "No data.",
        "No data.",
      ],
    ]
  }
  disableVirtualization={false}
  emptyText="No data."
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "padding": 8,
            "textAlign": "center",
          }
        }
      >
        No data.
      </Text>
    </View>
  </View>
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList with renderEmpty doesn't render empty with null 1`] = `
<RCTScrollView
  data={Immutable.List []}
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View />
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList with renderEmpty renders empty with a function 1`] = `
<Text
  accessible={true}
  allowFontScaling={true}
  ellipsizeMode="tail"
>
  "No items"
</Text>
`;

exports[`ImmutableVirtualizedList with renderEmpty renders empty with a string 1`] = `
<Text
  accessible={true}
  allowFontScaling={true}
  ellipsizeMode="tail"
  style={
    Array [
      Object {
        "padding": 8,
        "textAlign": "center",
      },
      Object {
        "color": "red",
      },
    ]
  }
>
  No items
</Text>
`;

exports[`ImmutableVirtualizedList with renderEmpty renders normally when there are some items 1`] = `
<RCTScrollView
  data={
    Immutable.List [
      "lists",
      "are",
      "great",
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        {"item":"lists","index":0,"separators":{}}
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        {"item":"are","index":1,"separators":{}}
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        {"item":"great","index":2,"separators":{}}
      </Text>
    </View>
  </View>
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList with renderEmptyInList doesn't render empty with null 1`] = `
<RCTScrollView
  data={Immutable.List []}
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View />
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList with renderEmptyInList renders empty with a function 1`] = `
<RCTScrollView
  data={
    Immutable.List [
      Immutable.List [
        undefined,
        [Function],
        "No data.",
      ],
    ]
  }
  disableVirtualization={false}
  emptyText="No data."
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        "No items"
      </Text>
    </View>
  </View>
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList with renderEmptyInList renders empty with a string 1`] = `
<RCTScrollView
  contentContainerStyle={
    Object {
      "color": "red",
    }
  }
  data={
    Immutable.List [
      Immutable.List [
        undefined,
        "No items",
        "No items",
      ],
    ]
  }
  disableVirtualization={false}
  emptyText="No items"
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "padding": 8,
            "textAlign": "center",
          }
        }
      >
        No items
      </Text>
    </View>
  </View>
</RCTScrollView>
`;

exports[`ImmutableVirtualizedList with renderEmptyInList renders normally when there are some items 1`] = `
<RCTScrollView
  data={
    Immutable.List [
      "lists",
      "are",
      "great",
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        {"item":"lists","index":0,"separators":{}}
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        {"item":"are","index":1,"separators":{}}
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        {"item":"great","index":2,"separators":{}}
      </Text>
    </View>
  </View>
</RCTScrollView>
`;
